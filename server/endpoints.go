// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/server.go.tmpl

package server

import (
	"net/http"

	"github.com/gorilla/mux"
	"github.com/guibirow/apigen/api"
	"github.com/mitchellh/mapstructure"
)

func (s *Server) LoginHandleFunc(w http.ResponseWriter, r *http.Request) {
	var req api.LoginRequest
	params := mux.Vars(r)
	dec, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
		TagName: "json",
		Result:  &req,
	})
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	err = dec.Decode(params)
	if err != nil {
		Encode(nil, w, nil, err)
	}
	// err = req.Validate()
	// if err != nil {
	// 	Encode(nil, w, nil, err)
	// 	return
	// }
	resp, err := s.api.Login(r.Context(), req)
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	Encode(nil, w, resp, nil)
}

func (s *Server) CreatePostHandleFunc(w http.ResponseWriter, r *http.Request) {
	var req api.CreatePostRequest
	params := mux.Vars(r)
	dec, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
		TagName: "json",
		Result:  &req,
	})
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	err = dec.Decode(params)
	if err != nil {
		Encode(nil, w, nil, err)
	}
	// err = req.Validate()
	// if err != nil {
	// 	Encode(nil, w, nil, err)
	// 	return
	// }
	resp, err := s.api.CreatePost(r.Context(), req)
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	Encode(nil, w, resp, nil)
}

func (s *Server) GetFeedHandleFunc(w http.ResponseWriter, r *http.Request) {
	var req api.GetFeedRequest
	params := mux.Vars(r)
	dec, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
		TagName: "json",
		Result:  &req,
	})
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	err = dec.Decode(params)
	if err != nil {
		Encode(nil, w, nil, err)
	}
	// err = req.Validate()
	// if err != nil {
	// 	Encode(nil, w, nil, err)
	// 	return
	// }
	resp, err := s.api.GetFeed(r.Context(), req)
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	Encode(nil, w, resp, nil)
}

func (s *Server) FollowUserHandleFunc(w http.ResponseWriter, r *http.Request) {
	var req api.FollowUserRequest
	params := mux.Vars(r)
	dec, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
		TagName: "json",
		Result:  &req,
	})
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	err = dec.Decode(params)
	if err != nil {
		Encode(nil, w, nil, err)
	}
	// err = req.Validate()
	// if err != nil {
	// 	Encode(nil, w, nil, err)
	// 	return
	// }
	resp, err := s.api.FollowUser(r.Context(), req)
	if err != nil {
		Encode(nil, w, nil, err)
		return
	}
	Encode(nil, w, resp, nil)
}
